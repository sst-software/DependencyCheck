package org.owasp.dependencycheck.data.jsonreport;

import javax.json.Json;
import org.junit.Test;
import org.owasp.dependencycheck.BaseTest;
import org.owasp.dependencycheck.dependency.Confidence;
import org.owasp.dependencycheck.dependency.Dependency;
import org.owasp.dependencycheck.dependency.Evidence;
import org.owasp.dependencycheck.dependency.EvidenceType;

import java.io.ByteArrayInputStream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Unit tests for the class JSONReportParser
 *
 * @author Silas de Graaf
 */
public class JSONReportParserTest extends BaseTest {

    /**
     * Test if invalid json is correctly handled
     */
    @Test(expected = JSONReportParseException.class)
    public void testInvalidJson() {
        String input = "[Invalid json]";
        JSONReportParser parser = new JSONReportParser(new ByteArrayInputStream(input.getBytes()));
        parser.process();
    }

    /**
     * Test if json in an incorrect format is correctly handled
     */
    @Test(expected = JSONReportParseException.class)
    public void testIncorrectFormat() {
        String input = "{\"dependencies\" : [\"test\"]}";
        JSONReportParser parser = new JSONReportParser(new ByteArrayInputStream(input.getBytes()));
        parser.process();
    }

    /**
     * Test if report with no dependencies is correctly handled
     */
    @Test
    public void testEmptyReport() {
        String input = "{\"dependencies\" : []}";
        JSONReportParser parser = new JSONReportParser(new ByteArrayInputStream(input.getBytes()));
        parser.process();
        assertEquals(0, parser.getDependencies().size());
    }

    /**
     * Test if after initialization, the parser contains no dependencies.
     */
    @Test
    public void testNoDependenciesOnInitialization() {
        JSONReportParser parser = new JSONReportParser(BaseTest.getResourceAsStream(this, "jsonreport/simple-dependencies.json"));
        assertTrue(parser.getDependencies().isEmpty());
    }

    /**
     * Test if JSON report of one simple dependency (generated by the JSON format) is parsed correctly.
     */
    @Test
    public void testSimpleDependency() {
        JSONReportParser parser = new JSONReportParser(BaseTest.getResourceAsStream(this, "jsonreport/simple-dependencies.json"));
        parser.process();
        assertEquals(parser.getDependencies().size(), 1);
        Dependency d = parser.getDependencies().get(0);
        assertEquals(d.getFileName(), "loader-utils:2.0.2");
        assertEquals(d.getEvidence().size(), 3);
        assertTrue(d.getEvidence(EvidenceType.VENDOR).contains(new Evidence("package.json", "name", "loader-utils", Confidence.HIGH)));
    }

    /**.
     * Test if JSON report of multiple dependencies is parsed correctly.
     */
    @Test
    public void testMultipleDependencies() {
        JSONReportParser parser = new JSONReportParser(BaseTest.getResourceAsStream(this, "jsonreport/multiple-dependencies.json"));
        parser.process();
        assertEquals(parser.getDependencies().size(), 10);
    }

    /**
     * Test if JSON report of one complex dependency (generated by the COMPLETE format) is parsed correctly.
     */
    @Test
    public void testComplexDependency() {
        JSONReportParser parser = new JSONReportParser(BaseTest.getResourceAsStream(this, "jsonreport/complex-dependencies.json"));
        parser.process();
        assertEquals(parser.getDependencies().size(), 1);
        Dependency d = parser.getDependencies().get(0);
        assertEquals(d.getEcosystem(), "java");
        assertEquals(d.getVendorWeightings().size(), 3);
    }

}
